name: toolchain

on:
  schedule:
    - cron: 0 17 * * 1
  repository_dispatch:
  workflow_dispatch:

env:
  DIY_P1_SH: sh/op.sh

jobs:
  build_firmware:
    name: 编译固件
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        repo_info:
          - {branch: "openwrt-24.10"}


    steps: 
    - name: 检查分支
      uses: actions/checkout@v4

    - name: 编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y tar img2simg build-essential flex bison cmake g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-distutils python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        sudo timedatectl set-timezone 'Asia/Shanghai'
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -Th

    - name: 设置环境变量
      run: |
        TAG="$(date +'%Y%m%d')-$(openssl rand -hex 3)"
        echo "tag=$TAG" >> $GITHUB_ENV
        echo "REPO_URL=https://github.com/openwrt/openwrt" >> $GITHUB_ENV
        echo "REPO_BRANCH=${{ matrix.repo_info.branch }}" >> $GITHUB_ENV

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 切换分支
      working-directory: ./openwrt
      id: var
      run: |
        case $REPO_BRANCH in
          openwrt-24.10)
            _release_tag=$(git tag --sort=taggerdate --list 'v24.*' | tail -1)
            git checkout $_release_tag
            _prerelease=false
            ;;
          openwrt-23.05)
            _release_tag=$(git tag --sort=taggerdate --list 'v23.*' | tail -1)
            git checkout $_release_tag
            _prerelease=false
            ;;
          *)
            echo "Can't get local/upstream's branch/tags"
            ;;
        esac
        echo "release_tag=$_release_tag" >> $GITHUB_ENV
        
    - name: patch修补
      run: |
        set -x
        [ -e patch ] && cp -rf patch/target openwrt
        [ -e patch ] && cp -rf patch/automount openwrt/package
        [ -e patch ] && cp -rf patch/kernel-6.6/modules/netsupport.mk openwrt/package/kernel/linux/modules
        [ -e patch ] && cp -rf patch/kernel-6.6/bbr3/*.patch openwrt
        [ -e patch ] && cp -rf patch/perf/Makefile openwrt/package/devel/perf
        [ -e patch ] && cp -rf patch/musl/990-add-typedefs-for-Elf64_Relr-and-Elf32_Relr.patch openwrt/toolchain/musl/patches
        cd openwrt
        ./scripts/feeds update -a
        cd .. 
        [ -e patch ] && cp -rf patch/firewall4/100-openwrt-firewall4-add-custom-nft-command-support.patch openwrt
        [ -e patch ] && cp -rf patch/firewall4/luci-24.10/*.patch openwrt/feeds/luci 
        [ -e patch ] && cp -rf patch/luci/*.patch openwrt/feeds/luci 
        [ -e patch ] && cp -rf patch/openssl/quic/*.patch openwrt/package/libs/openssl/patches
        mkdir -p openwrt/package/network/services/odhcpd/patches
        [ -e patch ] && cp -rf patch/odhcpd/*.patch openwrt/package/network/services/odhcpd/patches
        
    - name: 加载自定义脚本
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        cat <<EOF >>openwrt/.config
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m-emmc=y
        CONFIG_KERNEL_DEBUG_INFO=y
        CONFIG_KERNEL_DEBUG_INFO_REDUCED=n
        CONFIG_KERNEL_DEBUG_INFO_BTF=y
        CONFIG_KERNEL_CGROUPS=y
        CONFIG_KERNEL_CGROUP_BPF=y
        CONFIG_KERNEL_BPF_EVENTS=y
        CONFIG_BPF_TOOLCHAIN_HOST=y
        CONFIG_KERNEL_XDP_SOCKETS=y
        ### Luci Apps
        CONFIG_PACKAGE_luci-app-adguardhome=m
        CONFIG_PACKAGE_luci-app-airconnect=m
        CONFIG_PACKAGE_luci-app-aria2=m
        CONFIG_PACKAGE_luci-app-autoreboot=m
        CONFIG_PACKAGE_luci-app-cifs-mount=m
        CONFIG_PACKAGE_luci-app-cpufreq=m
        CONFIG_PACKAGE_luci-app-ddns-go=m
        CONFIG_PACKAGE_luci-app-diskman=m
        CONFIG_PACKAGE_luci-app-dockerman=m
        CONFIG_PACKAGE_luci-app-emby=m
        CONFIG_PACKAGE_luci-app-filebrowser-go=m
        CONFIG_PACKAGE_luci-app-frpc=m
        CONFIG_PACKAGE_luci-app-frps=m
        CONFIG_PACKAGE_luci-app-gowebdav=m
        CONFIG_PACKAGE_luci-app-hd-idle=m
        CONFIG_PACKAGE_luci-app-ksmbd=m
        CONFIG_PACKAGE_luci-app-lucky=m
        CONFIG_PACKAGE_luci-app-mentohust=m
        CONFIG_PACKAGE_luci-app-mosdns=m
        CONFIG_PACKAGE_luci-app-momo=m
        CONFIG_PACKAGE_luci-app-netdata=m
        CONFIG_PACKAGE_luci-app-netspeedtest=m
        CONFIG_PACKAGE_luci-app-nfs=m
        CONFIG_PACKAGE_luci-app-nlbwmon=m
        CONFIG_PACKAGE_luci-app-oaf=m
        CONFIG_PACKAGE_luci-app-openlist2=m
        CONFIG_PACKAGE_luci-app-qbittorrent=m
        CONFIG_PACKAGE_luci-app-qosmate=m
        CONFIG_PACKAGE_luci-app-ramfree=m
        CONFIG_PACKAGE_luci-app-samba4=m
        CONFIG_PACKAGE_luci-app-smartdns=m
        CONFIG_PACKAGE_luci-app-socat=m
        CONFIG_PACKAGE_luci-app-tailscale=m
        CONFIG_PACKAGE_luci-app-upnp=m
        CONFIG_PACKAGE_luci-app-usb-printer=m
        CONFIG_PACKAGE_luci-app-vlmcsd=m
        CONFIG_PACKAGE_luci-app-zerotier=m
        CONFIG_PACKAGE_luci-app-homeproxy=m
        CONFIG_PACKAGE_luci-app-nikki=m
        CONFIG_PACKAGE_luci-app-openclash=m
        CONFIG_PACKAGE_luci-theme-material3=y
        CONFIG_PACKAGE_luci-app-quickstart=m
        CONFIG_PACKAGE_luci-app-argon-config=m
        CONFIG_PACKAGE_luci-theme-argon=m
        CONFIG_PACKAGE_luci-app-istorex=m
        CONFIG_PACKAGE_luci-app-verysync=m
        CONFIG_PACKAGE_luci-app-syncthing=m
        EOF
           
    
    - name: 下载编译依赖
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: 编译源码
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
 

    - name: 清理缓存
      id: organize
      run: |
        cd openwrt
        make clean
 

    - name: 缓存 staging_dir
      uses: actions/cache@v4
      with:
        path: |
          openwrt/staging_dir
        key: ${{ matrix.repo_info.branch }}-toolchain-cache
        restore-keys: |
          ${{ matrix.repo_info.branch }}-toolchain-cache